package leetcode;
// 给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。
// 你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。
//
//返回滑动窗口中的最大值。

// 思；双端队列，Deque 操作需要注意
// Queue<Integer> cur_res = new LinkedList<>();
import java.util.*;

public class 滑动窗口的最大值 {
    public static void main(String[] args) {
        int[] nums = new int[]{-107,4331,3659,1287,-51,-567,9312,3409,4687,3435,9770,4303,9585,-463,7,8249,2668,9872,6814,5088,8762,9005,6224,9070,1304,9444,1250,4149,1070,6245,1770,5035,7478,2545,8001,9215,1197,6697,779,762,2514,7943,5888,4114,1240,620,5990,1304,8816,2680,-375,6435,5374,3589,-922,1969,3302,5203,1689,1683,6967,9706,2474,6724,249,2876,5766,195,3622,8986,6122,2270,402,6262,9642,4327,3911,2391,8789,2536,3860,2027,9248,-29,8483,9625,4780,3241,1560,1641,3974,-643,2640,4211,4045,8630,7445,3454,4901,3397,6850,4773,4965,3809,-267,1044,7087,6697,2825,3438,2800,7266,3600,-309,7148,4725,-995,3110,6386,6320,8515,338,4884,3036,3789,5387,5460,1742,201,434,752,7525,808,2800,7348,779,8136,8490,1704,1550,164,8891,9772,4973,4527,1680,3731,5175,-604,1121,9928,3688,9576,841,1696,-735,3449,1962,9518,-890,9138,3595,7636,1270,9248,8527,8757,7713,1948,6831,2403,9654,7102,334,6926,8993,8276,2935,3280,3997,8468,4430,2020,7785,1022,3614,3946,6373,-138,4998,4960,9905,7506,5484,3080,6436,7872,3959,161,1162,2923,5853,8913,9031,786,8154,8328,-639,2976,4504,8724,-44,7829,9877,4513,424,2469,2372,1880,5404,1998,1488,3771,8737,4796,7673,1947,2741,-728,-784,7227,6874,2806,7984,7765,4074,9289,1356,5431,794,9411,3842,3731,7948,2189,3584,3083,3878,6955,971,2186,1653,8863,6830,673,6748,9776,8827,1697,2715,5397,2622,3765,-687,1190,573,4397,5294,5547,2353,9436,-742,-334,504,8471,5497,4994,4664,4212,4534,9308,3385,5667,4475,8327,7539,-932,1375,8280,-131,8408,8517,4521,8796,9050,6113,2200,3868,6894,6201,2622,3697,7848,3962,5242,9185,35,-935,4236,2024,8364,9918,-733,7294,5686,5530,973,-367,8703,3981,5331,9115,6316,1351,2592,1034,9425,534,555,7796,5271,9200,-921,9910,9078,7847,9137,3158,2391,-651,9414,-40,-152,8487,4759,849,7373,1255,3679,8967,5230,8875,6009,-19,2784,204,1138,1681,5571,8791,6315,1886,4451,-809,7032,7230,5741,9586,9100,2937,1027,7426,904,8350,7712,6485,7692,-469,250,3327,9088,2527,8510,7170,97,3281,5814,958,5577,4019,7881,7850,2353,4698,9176,5024,187,584,9613,9866,3972,5735,6955,6749,8414,1302,2128,5619,3981,4574,4220,641,1355,-280,4570,2552,-831,4441,-211,2563,2867,3177,6462,33,-935,6600,2995,916,9067,9017,1598,92,6215,321,-655,2119,9339,9447,6384,2979,8783,612,8078,9032,9042,6084,7207,3316,1667,-578,6382,3,9162,328,6207,3443,1989,8491,3640,-526,7191,789,3535,5250,5283,8192,3753,2907,4596,7108,7688,5171,1752,9524,3242,5384,3190,4017,5626,8820,1919,162,6253,660,6851,-319,1124,4316,7958,5887,537,5984,7109,657,6352,455,8063,7366,8705,7582,2609,-244,-34,2084,3842,8648,4299,5147,9877,4827,4729,-591,1603,9625,3799,8952,6365,7491,9029,9262,3687,617,7222,1368,8652,1295,9600,-343,3510,6231,1607,7850,9181,3570,3257,373,1352,9362,-206,2877,-288,5184,8491,4826,3065,3475,-387,3404,5796,6241,189,3103,4236,9850,676,-483,9095,280,9069,6125,5815,8947,5024,9508,4245,5177,2133,150,6049,5475,8287,5974,2333,1178,780,5710,1498,3827,9176,3537,4240,5276,3344,5521,6509,8687,6906,6435,7494,-256,-116,4432,1666,7594,7805,6708,3967,6840,8581,3655,6674,952,2631,1798,9068,3312,4273,-360,3568,1159,-36,8325,8216,3822,2850,6331,3716,-935,5707,1958,8636,3958,7532,1518,7248,97,5143,6872,5840,3048,2600,6719,9598,5703,3521,8133,8150,3569,9659,7893,1969,2105,6232,1546,9863,1896,2193,6360,-572,8895,7693,6686,898,8447,8174,7101,
                4287,5101,7726,882,5870,1689,6777,438,7125,2289,4368,8373,8352,1504,8855,9494,4041,-390,7173,4196};
        int k = 10;
        System.out.println(Arrays.toString(maxSlidingWindow(nums,k)));

//        int times = 20;
//        while(times-- > 0){
//            int len = (int)(Math.random()*8);  // 长度限制最长不超过8
//            int[] nums = new int[len];
//            for (int i = 0; i < len; i++) {
//                nums[i] = (int)(Math.random()*30); // 每一位的数值设置
//            }
//            System.out.println(Arrays.toString(nums));
//            System.out.println(Arrays.toString(maxSlidingWindow(nums,3)));
//            System.out.println("===========================");
//        }
    }

    public static int[] maxSlidingWindow(int[] nums, int k) {
        Queue<Integer> cur_res = new LinkedList<>();
        if(nums == null || nums.length < k) return new int[]{};
        int[] res = new int[nums.length-k+1];
        MyQueue q = new MyQueue();
        for (int i = 0; i < nums.length; i++) {
            if(i < k-1){
                q.push_back(nums[i]);
            }else {
                q.push_back(nums[i]);
                cur_res.add(q.max());
                q.pop_front(nums[i-k+1]);
            }
        }
        int i = 0;
        while (!cur_res.isEmpty()){
            res[i] = cur_res.poll();
            i++;
        }
        return res;
    }
}

class MyQueue{
    Deque<Integer> queue = new LinkedList<>();   // 双端队列
//    Queue<Integer> queue = new LinkedList<>();
    public void push_back(Integer val){
        while(!queue.isEmpty()&& queue.peekLast() < val){
            queue.pollLast();
        }
        queue.addLast(val);
    }

    public void pop_front(Integer val){
        if(!queue.isEmpty()&& queue.peekFirst() == val){
            queue.pollFirst();
        }
    }

    public Integer max(){
        return queue.getFirst();
    }

}
